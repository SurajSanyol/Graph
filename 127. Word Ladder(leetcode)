class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        queue<pair<string,int>>q;
        vector<string>CopyWordlist=wordList;
        q.push({beginWord,1});

        unordered_set<string>st(CopyWordlist.begin(),CopyWordlist.end());

        st.erase(beginWord);

        while(!q.empty()){
             auto fNode = q.front();
             q.pop();
             string currString = fNode.first;
             int currCount = fNode.second;

             if(currString==endWord){
                return currCount;
             }

             for(int index =0;index<currString.length();index++){
                 char originalString = currString[index];
                  for(char ch='a';ch<='z';ch++){
                    currString[index]=ch;
                    if(st.find(currString)!=st.end()){
                        q.push({currString,currCount+1});
                        st.erase(currString);
                        
                    }
                  }
                  
                  currString[index]=originalString;
             }


        }

        return 0;

    }
};
