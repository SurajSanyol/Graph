#include <iostream>
#include <list>
#include <unordered_map>
using namespace std;

// without weight
// class Graph {
// public:
//   unordered_map<int, list<int>> m;
//   void addEdge(int u, int v, bool direction) {
//     m[u].push_back(v);
//     if (direction == 0) {
//       m[v].push_back(u);
//     }
//   }

//   void addprintEdge() {
//     for (auto i : m) {
//       cout << i.first << "->";
//       for (auto neighbour : i.second) {
//         cout << neighbour << ",";
//       }
//       cout << endl;
//     }
//   }
// };

// with weight
class Graph {
public:
  unordered_map<int, list<pair<int,int>>> m;
  void addEdge(int u, int v,int weight, bool direction) {
    m[u].push_back({v,weight});
    if (direction == 0) {
      m[v].push_back({u,weight});
    }
  }

  void addprintEdge() {
    for (auto i : m) {
      cout << i.first << "->";
      for (auto neighbour : i.second) {
        cout<< "(" << neighbour.first << "," << neighbour.second << "),";
      }
      cout << endl;
    }
  }
};


int main() {

  Graph g;
  g.addEdge(0, 1,3,0);
  g.addEdge(1, 2,2, 0);
  g.addEdge(0, 2,6, 0);
  cout << endl;
  g.addprintEdge();
}
