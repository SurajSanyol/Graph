#include <iostream>
#include <list>
#include <queue>
#include <unordered_map>
#include<vector>
#include<algorithm>
using namespace std;

class Graph {
public:
  unordered_map<int, list<pair<int, int>>> adj;

  void addEdge(int u, int v, int weight, bool direaction) {
    adj[u].push_back({v, weight});
    // if direction is 0 then undirected graph
    if (direaction == 0) {
      adj[v].push_back({u, weight});
    }
  }

  void printAdj() {
    for (auto i : adj) {
      cout << i.first << "->";
      for (auto j : i.second) {
        cout << "(" << j.first << "," << j.second << ")";
      }
      cout << endl;
    }
  }

  /// find the shortest path between the given source and destination using
  void shorestpathUsingBFS(int src, int dest) {
    queue<int> q;
    unordered_map<int, bool> visited;
    unordered_map<int, int> parent;
    q.push(src);
    visited[src] = true;
    parent[src] = -1;

    while (!q.empty()) {
      int frontNode = q.front();
      q.pop();

      for (auto nbr : adj[frontNode]) {
        if (!visited[nbr.first]) {
          q.push(nbr.first);
          visited[nbr.first] = true;
          parent[nbr.first] = frontNode;
        }
      }
    }

    // print the path
     vector<int>ans;
      int node = dest;
      while(node!=-1){
          ans.push_back(node);
          node = parent[node];
      }

      reverse(ans.begin(),ans.end());
       for(auto i: ans){
          cout<<i<<" ";
       }
  }
};

int main() {

  Graph g;

  g.addEdge(6, 7, 1, 1);
  g.addEdge(5, 4, 1, 1);
  g.addEdge(0, 5, 1, 1);
  g.addEdge(0, 1, 1, 1);
  g.addEdge(1, 2, 1, 1);
  g.addEdge(2, 3, 1, 1);
  g.addEdge(3, 4, 1, 1);
  g.addEdge(7, 8, 1, 1);
  g.addEdge(8, 4, 1, 1);
  g.addEdge(0, 6, 1, 1);

  g.printAdj();
    cout<< "printing the shorest "<<endl;
  cout<<endl;

   g.shorestpathUsingBFS(0,4);

  return 0;
}
