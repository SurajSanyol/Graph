#include <iostream>
#include<list>
#include<unordered_map>
#include<stack>
#include<vector>
#include<limits.h>
using namespace std;

class Graph{
    public:
       unordered_map<int, list<pair<int,int>>>adjList;
        
         void addEdge(int u, int v , int weight , bool direction){
           
           adjList[u].push_back({v,weight});
           // diraction == 0 , means it is direction
           // direction == 1, means it is undirection
            if(direction==1){
              adjList[v].push_back({u,weight});
            }
         }

         // print the adjList
          
          void printList(){
            for(auto i:adjList){
                cout<<i.first<<"-->";
                 for(auto nbr :i.second ){
                     cout<<"("<<nbr.first<<","<<nbr.second<<")"<<",";
                 }
                 cout<<endl;
            }
          }

          // topological sort 
           void topologicalSort(int src, unordered_map<int, bool> &visited,
                       stack<int> &ans) {
    visited[src] = true;

    for (auto nbr : adjList[src]) {
      if (!visited[nbr.first]) {
        topologicalSort(nbr.first, visited, ans);
      }
    }
    // backtracking ke time stack me node o push ker denge
    ans.push(src);
  }

  // shortestPath using dfs in directed graph ðŸš€ðŸš€ðŸš€ðŸš€ðŸš€ðŸš€ðŸš€ðŸš€
   void getShorPathDfs(int n,stack<int> &ans){
      vector<int>dist(n,INT_MAX);

      
      int src = ans.top();
      ans.pop();
      dist[src]=0;
      for(auto nbr:adjList[src]){
           if(dist[src]+nbr.second<dist[nbr.first]){
            dist[nbr.first] = dist[src]+nbr.second;
           }
      }

          while(!ans.empty()){
            int topElement = ans.top();
            ans.pop();

            if(dist[topElement]!=INT_MAX)
            {
                  for(auto nbr:adjList[topElement])
                  {
              if(dist[topElement]+nbr.second<dist[nbr.first]){
                dist[nbr.first] = dist[topElement]+nbr.second;
              }
             }
            }
          }

            for (int i = 0; i < n; i++) {
        if (dist[i] == INT_MAX) {
          cout << "INF ";
        } else {
          cout << dist[i] << " ";
        }
      }
      cout << endl;
    }

   

};

int main() {
   Graph g;
   g.addEdge(0,1,5,0);
   g.addEdge(0,2,3,0);
   g.addEdge(1,3,3,0);
   g.addEdge(2,1,2,0);
   g.addEdge(2,3,5,0);
   g.addEdge(2,4,6,0);
   g.addEdge(4,3,1,0);

   g.printList();

   cout<<"print shortest path"<<endl;
   cout<<endl;
   
   unordered_map<int, bool> visited;
   stack<int> ans;
   int src =0;
   g.topologicalSort(src,visited,ans);
   int n=5;
   g.getShorPathDfs(n,ans);

  return 0;
}
