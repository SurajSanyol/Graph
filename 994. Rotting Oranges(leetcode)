class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        
        queue<pair<pair<int,int>,int>>q;
        vector<vector<int>>arr=grid;
        int timer = 0;
        int m = arr.size();
        int n = arr[0].size(); 
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(arr[i][j]==2){
                     q.push({{i,j},0});
                }
            }
        }

        while(!q.empty()){
            auto fnode = q.front();
            q.pop();

            int x= fnode.first.first;
            int y = fnode.first.second;
            int t = fnode.second;

            int dx[]={-1,0,1,0};
            int dy[]={0,1,0,-1};
            
            for(int i=0;i<4;i++){
                int newX= x+dx[i];
                int newY = y+dy[i];

                if(newX>=0 && newX<m && newY>=0 && newY < n && arr[newX][newY]==1){
                     timer = max(timer,t+1);
                     q.push({{newX,newY},t+1});
                     arr[newX][newY]=2;
                }
            }

        }
        
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(arr[i][j]==1){
                     return -1;
                }
            }
        }

     

      return timer;
    }
};
