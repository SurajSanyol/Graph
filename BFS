#include <iostream>
#include <list>
#include <unordered_map>
#include <queue>
using namespace std;
template<typename T> 

class Graph {
public:
  unordered_map<T, list<pair<T,int>>> m;
  void addEdge(T u, T v,T weight, bool direction) {
    m[u].push_back({v,weight});
    if (direction == 0) {
      m[v].push_back({u,weight});
    }
  }

  void addprintEdge() {
    for (auto i : m) {
      cout << i.first << "->";
      for (auto neighbour : i.second) {
        cout << "("<<neighbour.first<<","<<neighbour.second<<")";
      }
      cout << endl;
    }
  }

   void bfsearch(T src){
       unordered_map<T ,bool>visited;
       queue<int>q;
       q.push(src);
       visited[src]=true;

     while(!q.empty()){
         T frontNode = q.front();
         q.pop();
         cout<<frontNode<<",";

       // inerstion neighbour
       for(auto neighbour:m[frontNode]){
           if(!visited[neighbour.first]){
             q.push(neighbour.first);
             visited[neighbour.first]=true;
           }
       }
     }
   }


};


int main() {

  Graph<char> g;
  g.addEdge('a','b',3,0);
  g.addEdge('c', 'b',2, 0);
  g.addEdge('d','a',9, 0);
  cout << endl;
  g.addprintEdge();

  cout<<endl;
  g.bfsearch('a');
}
